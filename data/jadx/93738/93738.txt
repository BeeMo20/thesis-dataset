SEVERITY = 4

package jadx.gui.treemodel;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.Icon;
import javax.swing.JPopupMenu;
import jadx.api.JavaNode;
import jadx.api.JavaPackage;
import jadx.gui.ui.MainWindow;
import jadx.gui.ui.popupmenu.JPackagePopupMenu;
import jadx.gui.utils.Icons;
import static jadx.gui.utils.UiUtils.escapeHtml;
import static jadx.gui.utils.UiUtils.fadeHtml;
import static jadx.gui.utils.UiUtils.wrapHtml;
public class JPackage extends JNode {
	private static final long serialVersionUID = -4120718634156839804L;
	public static final String PACKAGE_DEFAULT_HTML_STR = wrapHtml(fadeHtml(escapeHtml("<empty>")));
	private final JavaPackage pkg;
	private final boolean enabled;
	private final List<JClass> classes;
	private final List<JPackage> subPackages;
	private final boolean synthetic;
	private String name;
	public JPackage(JavaPackage pkg, boolean enabled, List<JClass> classes, List<JPackage> subPackages, boolean synthetic) {
		this.pkg = pkg;
		this.enabled = enabled;
		this.classes = classes;
		this.subPackages = subPackages;
		this.synthetic = synthetic;
	}
	public static JPackage makeTmpRoot() {
		return new JPackage(null, true, Collections.emptyList(), new ArrayList<>(), true);
	}
	public void update() {
		removeAllChildren();
		if (isEnabled()) {
			for (JPackage pkg : subPackages) {
				pkg.update();
				add(pkg);
			}
			for (JClass cls : classes) {
				cls.update();
				add(cls);
			}
		}
	}
	@Override
	public JPopupMenu onTreePopupMenu(MainWindow mainWindow) {
		return new JPackagePopupMenu(mainWindow, this);
	}
	public JavaPackage getPkg() {
		return pkg;
	}
	public JavaNode getJavaNode() {
		return pkg;
	}
	@Override
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public List<JPackage> getSubPackages() {
		return subPackages;
	}
	public List<JClass> getClasses() {
		return classes;
	}
	public boolean isEnabled() {
		return enabled;
	}
	public boolean isSynthetic() {
		return synthetic;
	}
	@Override
	public Icon getIcon() {
		return Icons.PACKAGE;
	}
	@Override
	public JClass getJParent() {
		return null;
	}
	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		return pkg.equals(((JPackage) o).pkg);
	}
	@Override
	public int hashCode() {
		return pkg.hashCode();
	}
	@Override
	public String makeString() {
		return name;
	}
	@Override
	public String makeStringHtml() {
		if (name.isEmpty()) {
			return PACKAGE_DEFAULT_HTML_STR;
		}
		return name;
	}
	@Override
	public boolean disableHtml() {
		if (name.isEmpty()) {
			return false;
		}
		return true;
	}
	@Override
	public String makeLongString() {
		return pkg.getFullName();
	}
	@Override
	public String toString() {
		return name;
	}
}
_____
package jadx.gui.ui.popupmenu;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import jadx.gui.JadxWrapper;
import jadx.gui.treemodel.JClass;
import jadx.gui.treemodel.JPackage;
import jadx.gui.ui.MainWindow;
import jadx.gui.ui.dialog.ExcludePkgDialog;
import jadx.gui.ui.dialog.RenameDialog;
import jadx.gui.ui.dialog.SearchDialog;
import jadx.gui.ui.filedialog.FileDialogWrapper;
import jadx.gui.ui.filedialog.FileOpenMode;
import jadx.gui.utils.NLS;
import jadx.gui.utils.pkgs.JRenamePackage;
import jadx.gui.utils.pkgs.PackageHelper;
public class JPackagePopupMenu extends JPopupMenu {
	private static final long serialVersionUID = -7781009781149224131L;
	private static final Logger LOG = LoggerFactory.getLogger(JPackagePopupMenu.class);
	private final transient MainWindow mainWindow;
	public JPackagePopupMenu(MainWindow mainWindow, JPackage pkg) {
		this.mainWindow = mainWindow;
		add(makeExcludeItem(pkg));
		add(makeExcludeItem());
		add(makeRenameMenuItem(pkg));
		add(makeExportSubMenu(pkg));
		add(makeSearchItem(pkg));
	}
	private JMenuItem makeRenameMenuItem(JPackage pkg) {
		JMenuItem renameSubMenu = new JMenu(NLS.str("popup.rename"));
		PackageHelper packageHelper = mainWindow.getCacheObject().getPackageHelper();
		List<JRenamePackage> nodes = packageHelper.getRenameNodes(pkg);
		for (JRenamePackage node : nodes) {
			JMenuItem pkgPartItem = new JMenuItem(node.getTitle(), node.getIcon());
			pkgPartItem.addActionListener(e -> rename(node));
			renameSubMenu.add(pkgPartItem);
		}
		return renameSubMenu;
	}
	private void rename(JRenamePackage pkg) {
		LOG.debug("Renaming package: {}", pkg);
		RenameDialog.rename(mainWindow, pkg);
	}
	private JMenuItem makeExcludeItem(JPackage pkg) {
		JMenuItem excludeItem = new JCheckBoxMenuItem(NLS.str("popup.exclude"));
		excludeItem.setSelected(!pkg.isEnabled());
		excludeItem.addItemListener(e -> {
			JadxWrapper wrapper = mainWindow.getWrapper();
			String fullName = pkg.getPkg().getFullName();
			if (excludeItem.isSelected()) {
				wrapper.addExcludedPackage(fullName);
			} else {
				wrapper.removeExcludedPackage(fullName);
			}
			mainWindow.reopen();
		});
		return excludeItem;
	}
	private JMenuItem makeExportSubMenu(JPackage pkg) {
		JMenu exportSubMenu = new JMenu(NLS.str("popup.export"));
		exportSubMenu.add(makeExportMenuItem(pkg, NLS.str("tabs.code"), JClassExportType.Code));
		exportSubMenu.add(makeExportMenuItem(pkg, NLS.str("tabs.smali"), JClassExportType.Smali));
		exportSubMenu.add(makeExportMenuItem(pkg, "Simple", JClassExportType.Simple));
		exportSubMenu.add(makeExportMenuItem(pkg, "Fallback", JClassExportType.Fallback));
		return exportSubMenu;
	}
	public JMenuItem makeExportMenuItem(JPackage pkg, String label, JClassExportType exportType) {
		JMenuItem exportMenuItem = new JMenuItem(label);
		exportMenuItem.addActionListener(event -> {
			FileDialogWrapper fileDialog = new FileDialogWrapper(mainWindow, FileOpenMode.EXPORT_NODE_FOLDER);
			List<Path> selectedPaths = fileDialog.show();
			if (selectedPaths.size() != 1) {
				return;
			}
			Path savePath = selectedPaths.get(0);
			saveJPackage(pkg, savePath, exportType);
		});
		return exportMenuItem;
	}
	private static void saveJPackage(JPackage pkg, Path savePath, JClassExportType exportType) {
		Path subSavePath = savePath.resolve(pkg.getName());
		try {
			if (!Files.isDirectory(subSavePath)) {
				Files.createDirectory(subSavePath);
			}
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		for (JClass jClass : pkg.getClasses()) {
			String fileName = jClass.getName() + "." + exportType.extension;
			JClassPopupMenu.saveJClass(jClass, subSavePath.resolve(fileName), exportType);
		}
		for (JPackage subPkg : pkg.getSubPackages()) {
			saveJPackage(subPkg, subSavePath, exportType);
		}
	}
	private JMenuItem makeExcludeItem() {
		return new JMenuItem(new AbstractAction(NLS.str("popup.exclude_packages")) {
			private static final long serialVersionUID = -1111111202104151028L;
			@Override
			public void actionPerformed(ActionEvent e) {
				new ExcludePkgDialog(mainWindow).setVisible(true);
			}
		});
	}
	private JMenuItem makeSearchItem(JPackage pkg) {
		JMenuItem searchItem = new JMenuItem(NLS.str("menu.text_search"));
		searchItem.addActionListener(e -> {
			String fullName = pkg.getPkg().getFullName();
			LOG.debug("Searching package: {}", fullName);
			SearchDialog.searchPackage(mainWindow, fullName);
		});
		return searchItem;
	}
}