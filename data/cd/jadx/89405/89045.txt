SEVERITY = 6

package jadx.core.xmlgen;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.NumberFormat;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;
import jadx.api.ICodeInfo;
import jadx.api.ICodeWriter;
import jadx.core.xmlgen.entry.ResourceEntry;
import jadx.core.xmlgen.entry.ValuesParser;
public class XmlGenUtils {
	private XmlGenUtils() {
	}
	public static byte[] readData(InputStream i) throws IOException {
		ByteArrayOutputStream buffer = new ByteArrayOutputStream();
		byte[] data = new byte[16384];
		int read;
		while ((read = i.read(data, 0, data.length)) != -1) {
			buffer.write(data, 0, read);
		}
		return buffer.toByteArray();
	}
	public static ICodeInfo makeXmlDump(ICodeWriter writer, ResourceStorage resStorage) {
		writer.add("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
		writer.startLine("<resources>");
		writer.incIndent();
		Set<String> addedValues = new HashSet<>();
		for (ResourceEntry ri : resStorage.getResources()) {
			if (addedValues.add(ri.getTypeName() + '.' + ri.getKeyName())) {
				String format = String.format("<public type=\"%s\" name=\"%s\" id=\"0x%08x\" />",
						ri.getTypeName(), ri.getKeyName(), ri.getId());
				writer.startLine(format);
			}
		}
		writer.decIndent();
		writer.startLine("</resources>");
		return writer.finish();
	}
	public static String decodeComplex(int data, boolean isFraction) {
		double value = (data & ParserConstants.COMPLEX_MANTISSA_MASK << ParserConstants.COMPLEX_MANTISSA_SHIFT)
				* ParserConstants.RADIX_MULTS[data >> ParserConstants.COMPLEX_RADIX_SHIFT & ParserConstants.COMPLEX_RADIX_MASK];
		int unitType = data & ParserConstants.COMPLEX_UNIT_MASK;
		String unit;
		if (isFraction) {
			value *= 100;
			switch (unitType) {
				case ParserConstants.COMPLEX_UNIT_FRACTION:
					unit = "%";
					break;
				case ParserConstants.COMPLEX_UNIT_FRACTION_PARENT:
					unit = "%p";
					break;
				default:
					unit = "?f" + Integer.toHexString(unitType);
			}
		} else {
			switch (unitType) {
				case ParserConstants.COMPLEX_UNIT_PX:
					unit = "px";
					break;
				case ParserConstants.COMPLEX_UNIT_DIP:
					unit = "dp";
					break;
				case ParserConstants.COMPLEX_UNIT_SP:
					unit = "sp";
					break;
				case ParserConstants.COMPLEX_UNIT_PT:
					unit = "pt";
					break;
				case ParserConstants.COMPLEX_UNIT_IN:
					unit = "in";
					break;
				case ParserConstants.COMPLEX_UNIT_MM:
					unit = "mm";
					break;
				default:
					unit = "?d" + Integer.toHexString(unitType);
			}
		}
		return doubleToString(value) + unit;
	}
	public static String doubleToString(double value) {
		if (Double.compare(value, Math.floor(value)) == 0
				&& !Double.isInfinite(value)) {
			return Integer.toString((int) value);
		}
		NumberFormat f = NumberFormat.getInstance(Locale.ROOT);
		f.setMaximumFractionDigits(4);
		f.setMinimumIntegerDigits(1);
		return f.format(value);
	}
	public static String floatToString(float value) {
		return doubleToString(value);
	}
	public static String getAttrTypeAsString(int type) {
		String s = "";
		if ((type & ValuesParser.ATTR_TYPE_REFERENCE) != 0) {
			s += "|reference";
		}
		if ((type & ValuesParser.ATTR_TYPE_STRING) != 0) {
			s += "|string";
		}
		if ((type & ValuesParser.ATTR_TYPE_INTEGER) != 0) {
			s += "|integer";
		}
		if ((type & ValuesParser.ATTR_TYPE_BOOLEAN) != 0) {
			s += "|boolean";
		}
		if ((type & ValuesParser.ATTR_TYPE_COLOR) != 0) {
			s += "|color";
		}
		if ((type & ValuesParser.ATTR_TYPE_FLOAT) != 0) {
			s += "|float";
		}
		if ((type & ValuesParser.ATTR_TYPE_DIMENSION) != 0) {
			s += "|dimension";
		}
		if ((type & ValuesParser.ATTR_TYPE_FRACTION) != 0) {
			s += "|fraction";
		}
		if (s.isEmpty()) {
			return null;
		}
		return s.substring(1);
	}
}
__________
package jadx.core.xmlgen.entry;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import jadx.core.utils.android.AndroidResourcesMap;
import jadx.core.xmlgen.BinaryXMLStrings;
import jadx.core.xmlgen.ParserConstants;
import jadx.core.xmlgen.XmlGenUtils;
public class ValuesParser extends ParserConstants {
	private static final Logger LOG = LoggerFactory.getLogger(ValuesParser.class);
	private final BinaryXMLStrings strings;
	private final Map<Integer, String> resMap;
	public ValuesParser(BinaryXMLStrings strings, Map<Integer, String> resMap) {
		this.strings = strings;
		this.resMap = resMap;
	}
	@Nullable
	public String getSimpleValueString(ResourceEntry ri) {
		ProtoValue protoValue = ri.getProtoValue();
		if (protoValue != null) {
			return protoValue.getValue();
		}
		RawValue simpleValue = ri.getSimpleValue();
		if (simpleValue == null) {
			return null;
		}
		return decodeValue(simpleValue);
	}
	@Nullable
	public String getValueString(ResourceEntry ri) {
		ProtoValue protoValue = ri.getProtoValue();
		if (protoValue != null) {
			if (protoValue.getValue() != null) {
				return protoValue.getValue();
			}
			List<ProtoValue> values = protoValue.getNamedValues();
			List<String> strList = new ArrayList<>(values.size());
			for (ProtoValue value : values) {
				if (value.getName() == null) {
					strList.add(value.getValue());
				} else {
					strList.add(value.getName() + '=' + value.getValue());
				}
			}
			return strList.toString();
		}
		RawValue simpleValue = ri.getSimpleValue();
		if (simpleValue != null) {
			return decodeValue(simpleValue);
		}
		List<RawNamedValue> namedValues = ri.getNamedValues();
		List<String> strList = new ArrayList<>(namedValues.size());
		for (RawNamedValue value : namedValues) {
			String nameStr = decodeNameRef(value.getNameRef());
			String valueStr = decodeValue(value.getRawValue());
			if (nameStr == null) {
				strList.add(valueStr);
			} else {
				strList.add(nameStr + '=' + valueStr);
			}
		}
		return strList.toString();
	}
	@Nullable
	public String decodeValue(RawValue value) {
		int dataType = value.getDataType();
		int data = value.getData();
		return decodeValue(dataType, data);
	}
	@Nullable
	public String decodeValue(int dataType, int data) {
		switch (dataType) {
			case TYPE_NULL:
				return null;
			case TYPE_STRING:
				return strings.get(data);
			case TYPE_INT_DEC:
				return Integer.toString(data);
			case TYPE_INT_HEX:
				return "0x" + Integer.toHexString(data);
			case TYPE_INT_BOOLEAN:
				return data == 0 ? "false" : "true";
			case TYPE_FLOAT:
				return XmlGenUtils.floatToString(Float.intBitsToFloat(data));
			case TYPE_INT_COLOR_ARGB8:
				return String.format("#%08x", data);
			case TYPE_INT_COLOR_RGB8:
				return String.format("#%06x", data & 0xFFFFFF);
			case TYPE_INT_COLOR_ARGB4:
				return String.format("#%04x", data & 0xFFFF);
			case TYPE_INT_COLOR_RGB4:
				return String.format("#%03x", data & 0xFFF);
			case TYPE_DYNAMIC_REFERENCE:
			case TYPE_REFERENCE: {
				String ri = resMap.get(data);
				if (ri == null) {
					String androidRi = AndroidResourcesMap.getResName(data);
					if (androidRi != null) {
						return "@android:" + androidRi;
					}
					if (data == 0) {
						return "0";
					}
					return "?unknown_ref: " + Integer.toHexString(data);
				}
				return '@' + ri;
			}
			case TYPE_ATTRIBUTE: {
				String ri = resMap.get(data);
				if (ri == null) {
					String androidRi = AndroidResourcesMap.getResName(data);
					if (androidRi != null) {
						return "?android:" + androidRi;
					}
					return "?unknown_attr_ref: " + Integer.toHexString(data);
				}
				return '?' + ri;
			}
			case TYPE_DIMENSION:
				return XmlGenUtils.decodeComplex(data, false);
			case TYPE_FRACTION:
				return XmlGenUtils.decodeComplex(data, true);
			case TYPE_DYNAMIC_ATTRIBUTE:
				LOG.warn("Data type TYPE_DYNAMIC_ATTRIBUTE not yet supported: {}", data);
				return "  TYPE_DYNAMIC_ATTRIBUTE: " + data;
			default:
				LOG.warn("Unknown data type: 0x{} {}", Integer.toHexString(dataType), data);
				return "  ?0x" + Integer.toHexString(dataType) + ' ' + data;
		}
	}
	public String decodeNameRef(int nameRef) {
		int ref = nameRef;
		if (isResInternalId(nameRef)) {
			ref = nameRef & ATTR_TYPE_ANY;
			if (ref == 0) {
				return null;
			}
		}
		String ri = resMap.get(ref);
		if (ri != null) {
			return ri.replace('/', '.');
		} else {
			String androidRi = AndroidResourcesMap.getResName(ref);
			if (androidRi != null) {
				return "android:" + androidRi.replace('/', '.');
			}
		}
		return "?0x" + Integer.toHexString(nameRef);
	}
}