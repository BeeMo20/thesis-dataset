SEVERITY = 5

package jadx.core.codegen;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import jadx.core.dex.attributes.AFlag;
import jadx.core.dex.instructions.args.ArgType;
import jadx.core.dex.instructions.args.LiteralArg;
import jadx.core.dex.instructions.args.PrimitiveType;
import jadx.core.dex.nodes.IDexNode;
import jadx.core.utils.StringUtils;
import jadx.core.utils.Utils;
import jadx.core.utils.exceptions.JadxRuntimeException;
public class TypeGen {
	private static final Logger LOG = LoggerFactory.getLogger(TypeGen.class);
	private TypeGen() {
	}
	public static String signature(ArgType type) {
		PrimitiveType stype = type.getPrimitiveType();
		if (stype == PrimitiveType.OBJECT) {
			return Utils.makeQualifiedObjectName(type.getObject());
		}
		if (stype == PrimitiveType.ARRAY) {
			return '[' + signature(type.getArrayElement());
		}
		return stype.getShortName();
	}
	public static String literalToString(LiteralArg arg, IDexNode dexNode, boolean fallback) {
		return literalToString(arg.getLiteral(), arg.getType(),
				dexNode.root().getStringUtils(),
				fallback,
				arg.contains(AFlag.EXPLICIT_PRIMITIVE_TYPE));
	}
	public static String literalToString(long lit, ArgType type, IDexNode dexNode, boolean fallback) {
		return literalToString(lit, type, dexNode.root().getStringUtils(), fallback, false);
	}
	public static String literalToString(long lit, ArgType type, StringUtils stringUtils, boolean fallback, boolean cast) {
		if (type == null || !type.isTypeKnown()) {
			String n = Long.toString(lit);
			if (fallback && Math.abs(lit) > 100) {
				StringBuilder sb = new StringBuilder();
				sb.append(n).append("(0x").append(Long.toHexString(lit));
				if (type == null || type.contains(PrimitiveType.FLOAT)) {
					sb.append(", float:").append(Float.intBitsToFloat((int) lit));
				}
				if (type == null || type.contains(PrimitiveType.DOUBLE)) {
					sb.append(", double:").append(Double.longBitsToDouble(lit));
				}
				sb.append(')');
				return sb.toString();
			}
			return n;
		}
		switch (type.getPrimitiveType()) {
			case BOOLEAN:
				return lit == 0 ? "false" : "true";
			case CHAR:
				return stringUtils.unescapeChar((char) lit, cast);
			case BYTE:
				return stringUtils.formatByte(lit, cast);
			case SHORT:
				return stringUtils.formatShort(lit, cast);
			case INT:
				return stringUtils.formatInteger(lit, cast);
			case LONG:
				return stringUtils.formatLong(lit, cast);
			case FLOAT:
				return StringUtils.formatFloat(Float.intBitsToFloat((int) lit));
			case DOUBLE:
				return StringUtils.formatDouble(Double.longBitsToDouble(lit));
			case OBJECT:
			case ARRAY:
				if (lit != 0) {
					LOG.warn("Wrong object literal: {} for type: {}", lit, type);
					return Long.toString(lit);
				}
				return "null";
			default:
				throw new JadxRuntimeException("Unknown type in literalToString: " + type);
		}
	}
	@Nullable
	public static String literalToRawString(LiteralArg arg) {
		ArgType type = arg.getType();
		if (type == null) {
			return null;
		}
		long lit = arg.getLiteral();
		switch (type.getPrimitiveType()) {
			case BOOLEAN:
				return lit == 0 ? "false" : "true";
			case CHAR:
				return String.valueOf((char) lit);
			case BYTE:
			case SHORT:
			case INT:
			case LONG:
				return Long.toString(lit);
			case FLOAT:
				return Float.toString(Float.intBitsToFloat((int) lit));
			case DOUBLE:
				return Double.toString(Double.longBitsToDouble(lit));
			case OBJECT:
			case ARRAY:
				if (lit != 0) {
					LOG.warn("Wrong object literal: {} for type: {}", lit, type);
					return Long.toString(lit);
				}
				return "null";
			default:
				return null;
		}
	}
}
_____
package jadx.core.dex.instructions.args;
import org.jetbrains.annotations.Nullable;
import jadx.core.codegen.TypeGen;
import jadx.core.utils.StringUtils;
import jadx.core.utils.exceptions.JadxRuntimeException;
public final class LiteralArg extends InsnArg {
	public static LiteralArg make(long value, ArgType type) {
		return new LiteralArg(value, type);
	}
	public static LiteralArg makeWithFixedType(long value, ArgType type) {
		return new LiteralArg(value, fixLiteralType(value, type));
	}
	private static ArgType fixLiteralType(long value, ArgType type) {
		if (value == 0 || type.isTypeKnown() || type.contains(PrimitiveType.LONG) || type.contains(PrimitiveType.DOUBLE)) {
			return type;
		}
		if (value == 1) {
			return ArgType.NARROW_NUMBERS;
		}
		return ArgType.NARROW_NUMBERS_NO_BOOL;
	}
	public static LiteralArg litFalse() {
		return new LiteralArg(0, ArgType.BOOLEAN);
	}
	public static LiteralArg litTrue() {
		return new LiteralArg(1, ArgType.BOOLEAN);
	}
	private final long literal;
	private LiteralArg(long value, ArgType type) {
		if (value != 0 && type.isObject()) {
			throw new JadxRuntimeException("Wrong literal type: " + type + " for value: " + value);
		}
		this.literal = value;
		this.type = type;
	}
	public long getLiteral() {
		return literal;
	}
	@Override
	public void setType(ArgType type) {
		super.setType(type);
	}
	@Override
	public boolean isLiteral() {
		return true;
	}
	@Override
	public boolean isZeroLiteral() {
		return literal == 0;
	}
	public boolean isInteger() {
		switch (type.getPrimitiveType()) {
			case INT:
			case BYTE:
			case CHAR:
			case SHORT:
			case LONG:
				return true;
			default:
				return false;
		}
	}
	public boolean isNegative() {
		if (isInteger()) {
			return literal < 0;
		}
		if (type == ArgType.FLOAT) {
			float val = Float.intBitsToFloat(((int) literal));
			return val < 0 && Float.isFinite(val);
		}
		if (type == ArgType.DOUBLE) {
			double val = Double.longBitsToDouble(literal);
			return val < 0 && Double.isFinite(val);
		}
		return false;
	}
	@Nullable
	public LiteralArg negate() {
		long neg;
		if (isInteger()) {
			neg = -literal;
		} else if (type == ArgType.FLOAT) {
			float val = Float.intBitsToFloat(((int) literal));
			neg = Float.floatToIntBits(-val);
		} else if (type == ArgType.DOUBLE) {
			double val = Double.longBitsToDouble(literal);
			neg = Double.doubleToLongBits(-val);
		} else {
			return null;
		}
		return new LiteralArg(neg, type);
	}
	@Override
	public InsnArg duplicate() {
		return copyCommonParams(new LiteralArg(literal, type));
	}
	@Override
	public int hashCode() {
		return (int) (literal ^ literal >>> 32) + 31 * getType().hashCode();
	}
	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		LiteralArg that = (LiteralArg) o;
		return literal == that.literal && getType().equals(that.getType());
	}
	@Override
	public String toShortString() {
		return Long.toString(literal);
	}
	@Override
	public String toString() {
		try {
			String value = TypeGen.literalToString(literal, getType(), StringUtils.getInstance(), true, false);
			if (getType().equals(ArgType.BOOLEAN) && (value.equals("true") || value.equals("false"))) {
				return value;
			}
			return '(' + value + ' ' + type + ')';
		} catch (JadxRuntimeException ex) {
			return "(" + literal + ' ' + type + ')';
		}
	}
}